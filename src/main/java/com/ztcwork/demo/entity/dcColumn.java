package com.ztcwork.demo.entity;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-12-17")
public class dcColumn implements org.apache.thrift.TBase<dcColumn, dcColumn._Fields>, java.io.Serializable, Cloneable, Comparable<dcColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dcColumn");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("descrip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SAMPLE_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("samplePeriod", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COL_DAT_FIELD_DESC = new org.apache.thrift.protocol.TField("colDat", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dcColumnStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dcColumnTupleSchemeFactory();

  public String name; // required
  public String descrip; // required
  public int samplePeriod; // required
  /**
   * 
   * @see dcColType
   */
  public dcColType type; // required
  public String address; // required
  public java.nio.ByteBuffer colDat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DESCRIP((short)2, "descrip"),
    SAMPLE_PERIOD((short)3, "samplePeriod"),
    /**
     * 
     * @see dcColType
     */
    TYPE((short)4, "type"),
    ADDRESS((short)5, "address"),
    COL_DAT((short)6, "colDat");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DESCRIP
          return DESCRIP;
        case 3: // SAMPLE_PERIOD
          return SAMPLE_PERIOD;
        case 4: // TYPE
          return TYPE;
        case 5: // ADDRESS
          return ADDRESS;
        case 6: // COL_DAT
          return COL_DAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SAMPLEPERIOD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIP, new org.apache.thrift.meta_data.FieldMetaData("descrip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLE_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("samplePeriod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, dcColType.class)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_DAT, new org.apache.thrift.meta_data.FieldMetaData("colDat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dcColumn.class, metaDataMap);
  }

  public dcColumn() {
  }

  public dcColumn(
    String name,
    String descrip,
    int samplePeriod,
    dcColType type,
    String address,
    java.nio.ByteBuffer colDat)
  {
    this();
    this.name = name;
    this.descrip = descrip;
    this.samplePeriod = samplePeriod;
    setSamplePeriodIsSet(true);
    this.type = type;
    this.address = address;
    this.colDat = org.apache.thrift.TBaseHelper.copyBinary(colDat);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public dcColumn(dcColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescrip()) {
      this.descrip = other.descrip;
    }
    this.samplePeriod = other.samplePeriod;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetColDat()) {
      this.colDat = org.apache.thrift.TBaseHelper.copyBinary(other.colDat);
    }
  }

  public dcColumn deepCopy() {
    return new dcColumn(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.descrip = null;
    setSamplePeriodIsSet(false);
    this.samplePeriod = 0;
    this.type = null;
    this.address = null;
    this.colDat = null;
  }

  public String getName() {
    return this.name;
  }

  public dcColumn setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescrip() {
    return this.descrip;
  }

  public dcColumn setDescrip(String descrip) {
    this.descrip = descrip;
    return this;
  }

  public void unsetDescrip() {
    this.descrip = null;
  }

  /** Returns true if field descrip is set (has been assigned a value) and false otherwise */
  public boolean isSetDescrip() {
    return this.descrip != null;
  }

  public void setDescripIsSet(boolean value) {
    if (!value) {
      this.descrip = null;
    }
  }

  public int getSamplePeriod() {
    return this.samplePeriod;
  }

  public dcColumn setSamplePeriod(int samplePeriod) {
    this.samplePeriod = samplePeriod;
    setSamplePeriodIsSet(true);
    return this;
  }

  public void unsetSamplePeriod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLEPERIOD_ISSET_ID);
  }

  /** Returns true if field samplePeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplePeriod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLEPERIOD_ISSET_ID);
  }

  public void setSamplePeriodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLEPERIOD_ISSET_ID, value);
  }

  /**
   * 
   * @see dcColType
   */
  public dcColType getType() {
    return this.type;
  }

  /**
   * 
   * @see dcColType
   */
  public dcColumn setType(dcColType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public dcColumn setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public byte[] getColDat() {
    setColDat(org.apache.thrift.TBaseHelper.rightSize(colDat));
    return colDat == null ? null : colDat.array();
  }

  public java.nio.ByteBuffer bufferForColDat() {
    return org.apache.thrift.TBaseHelper.copyBinary(colDat);
  }

  public dcColumn setColDat(byte[] colDat) {
    this.colDat = colDat == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(colDat.clone());
    return this;
  }

  public dcColumn setColDat(java.nio.ByteBuffer colDat) {
    this.colDat = org.apache.thrift.TBaseHelper.copyBinary(colDat);
    return this;
  }

  public void unsetColDat() {
    this.colDat = null;
  }

  /** Returns true if field colDat is set (has been assigned a value) and false otherwise */
  public boolean isSetColDat() {
    return this.colDat != null;
  }

  public void setColDatIsSet(boolean value) {
    if (!value) {
      this.colDat = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIP:
      if (value == null) {
        unsetDescrip();
      } else {
        setDescrip((String)value);
      }
      break;

    case SAMPLE_PERIOD:
      if (value == null) {
        unsetSamplePeriod();
      } else {
        setSamplePeriod((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((dcColType)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case COL_DAT:
      if (value == null) {
        unsetColDat();
      } else {
        if (value instanceof byte[]) {
          setColDat((byte[])value);
        } else {
          setColDat((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DESCRIP:
      return getDescrip();

    case SAMPLE_PERIOD:
      return getSamplePeriod();

    case TYPE:
      return getType();

    case ADDRESS:
      return getAddress();

    case COL_DAT:
      return getColDat();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DESCRIP:
      return isSetDescrip();
    case SAMPLE_PERIOD:
      return isSetSamplePeriod();
    case TYPE:
      return isSetType();
    case ADDRESS:
      return isSetAddress();
    case COL_DAT:
      return isSetColDat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof dcColumn)
      return this.equals((dcColumn)that);
    return false;
  }

  public boolean equals(dcColumn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_descrip = true && this.isSetDescrip();
    boolean that_present_descrip = true && that.isSetDescrip();
    if (this_present_descrip || that_present_descrip) {
      if (!(this_present_descrip && that_present_descrip))
        return false;
      if (!this.descrip.equals(that.descrip))
        return false;
    }

    boolean this_present_samplePeriod = true;
    boolean that_present_samplePeriod = true;
    if (this_present_samplePeriod || that_present_samplePeriod) {
      if (!(this_present_samplePeriod && that_present_samplePeriod))
        return false;
      if (this.samplePeriod != that.samplePeriod)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_colDat = true && this.isSetColDat();
    boolean that_present_colDat = true && that.isSetColDat();
    if (this_present_colDat || that_present_colDat) {
      if (!(this_present_colDat && that_present_colDat))
        return false;
      if (!this.colDat.equals(that.colDat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescrip()) ? 131071 : 524287);
    if (isSetDescrip())
      hashCode = hashCode * 8191 + descrip.hashCode();

    hashCode = hashCode * 8191 + samplePeriod;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetColDat()) ? 131071 : 524287);
    if (isSetColDat())
      hashCode = hashCode * 8191 + colDat.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(dcColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescrip()).compareTo(other.isSetDescrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descrip, other.descrip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamplePeriod()).compareTo(other.isSetSamplePeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplePeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplePeriod, other.samplePeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColDat()).compareTo(other.isSetColDat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColDat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colDat, other.colDat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("dcColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descrip:");
    if (this.descrip == null) {
      sb.append("null");
    } else {
      sb.append(this.descrip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samplePeriod:");
    sb.append(this.samplePeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colDat:");
    if (this.colDat == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.colDat, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class dcColumnStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public dcColumnStandardScheme getScheme() {
      return new dcColumnStandardScheme();
    }
  }

  private static class dcColumnStandardScheme extends org.apache.thrift.scheme.StandardScheme<dcColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, dcColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descrip = iprot.readString();
              struct.setDescripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SAMPLE_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.samplePeriod = iprot.readI32();
              struct.setSamplePeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = dcColType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COL_DAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colDat = iprot.readBinary();
              struct.setColDatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, dcColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.descrip != null) {
        oprot.writeFieldBegin(DESCRIP_FIELD_DESC);
        oprot.writeString(struct.descrip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAMPLE_PERIOD_FIELD_DESC);
      oprot.writeI32(struct.samplePeriod);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.colDat != null) {
        oprot.writeFieldBegin(COL_DAT_FIELD_DESC);
        oprot.writeBinary(struct.colDat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class dcColumnTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public dcColumnTupleScheme getScheme() {
      return new dcColumnTupleScheme();
    }
  }

  private static class dcColumnTupleScheme extends org.apache.thrift.scheme.TupleScheme<dcColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, dcColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDescrip()) {
        optionals.set(1);
      }
      if (struct.isSetSamplePeriod()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetAddress()) {
        optionals.set(4);
      }
      if (struct.isSetColDat()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescrip()) {
        oprot.writeString(struct.descrip);
      }
      if (struct.isSetSamplePeriod()) {
        oprot.writeI32(struct.samplePeriod);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetColDat()) {
        oprot.writeBinary(struct.colDat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, dcColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.descrip = iprot.readString();
        struct.setDescripIsSet(true);
      }
      if (incoming.get(2)) {
        struct.samplePeriod = iprot.readI32();
        struct.setSamplePeriodIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = dcColType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.colDat = iprot.readBinary();
        struct.setColDatIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

