package com.ztcwork.demo.entity;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-12-17")
public class dcProduct implements org.apache.thrift.TBase<dcProduct, dcProduct._Fields>, java.io.Serializable, Cloneable, Comparable<dcProduct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dcProduct");

  private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MATERIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("materialName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IS_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isInterval", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dcProductStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dcProductTupleSchemeFactory();

  public String rowkey; // required
  public String startTime; // required
  public String endTime; // required
  public String deviceName; // required
  public String materialName; // required
  public java.util.List<dcColumn> data; // required
  public boolean isInterval; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROWKEY((short)1, "rowkey"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    DEVICE_NAME((short)4, "deviceName"),
    MATERIAL_NAME((short)5, "materialName"),
    DATA((short)6, "data"),
    IS_INTERVAL((short)7, "isInterval");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROWKEY
          return ROWKEY;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // DEVICE_NAME
          return DEVICE_NAME;
        case 5: // MATERIAL_NAME
          return MATERIAL_NAME;
        case 6: // DATA
          return DATA;
        case 7: // IS_INTERVAL
          return IS_INTERVAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISINTERVAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATERIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("materialName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dcColumn.class))));
    tmpMap.put(_Fields.IS_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("isInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dcProduct.class, metaDataMap);
  }

  public dcProduct() {
  }

  public dcProduct(
    String rowkey,
    String startTime,
    String endTime,
    String deviceName,
    String materialName,
    java.util.List<dcColumn> data,
    boolean isInterval)
  {
    this();
    this.rowkey = rowkey;
    this.startTime = startTime;
    this.endTime = endTime;
    this.deviceName = deviceName;
    this.materialName = materialName;
    this.data = data;
    this.isInterval = isInterval;
    setIsIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public dcProduct(dcProduct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRowkey()) {
      this.rowkey = other.rowkey;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetMaterialName()) {
      this.materialName = other.materialName;
    }
    if (other.isSetData()) {
      java.util.List<dcColumn> __this__data = new java.util.ArrayList<dcColumn>(other.data.size());
      for (dcColumn other_element : other.data) {
        __this__data.add(new dcColumn(other_element));
      }
      this.data = __this__data;
    }
    this.isInterval = other.isInterval;
  }

  public dcProduct deepCopy() {
    return new dcProduct(this);
  }

  @Override
  public void clear() {
    this.rowkey = null;
    this.startTime = null;
    this.endTime = null;
    this.deviceName = null;
    this.materialName = null;
    this.data = null;
    setIsIntervalIsSet(false);
    this.isInterval = false;
  }

  public String getRowkey() {
    return this.rowkey;
  }

  public dcProduct setRowkey(String rowkey) {
    this.rowkey = rowkey;
    return this;
  }

  public void unsetRowkey() {
    this.rowkey = null;
  }

  /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
  public boolean isSetRowkey() {
    return this.rowkey != null;
  }

  public void setRowkeyIsSet(boolean value) {
    if (!value) {
      this.rowkey = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public dcProduct setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public dcProduct setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getDeviceName() {
    return this.deviceName;
  }

  public dcProduct setDeviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public String getMaterialName() {
    return this.materialName;
  }

  public dcProduct setMaterialName(String materialName) {
    this.materialName = materialName;
    return this;
  }

  public void unsetMaterialName() {
    this.materialName = null;
  }

  /** Returns true if field materialName is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterialName() {
    return this.materialName != null;
  }

  public void setMaterialNameIsSet(boolean value) {
    if (!value) {
      this.materialName = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<dcColumn> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(dcColumn elem) {
    if (this.data == null) {
      this.data = new java.util.ArrayList<dcColumn>();
    }
    this.data.add(elem);
  }

  public java.util.List<dcColumn> getData() {
    return this.data;
  }

  public dcProduct setData(java.util.List<dcColumn> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public boolean isIsInterval() {
    return this.isInterval;
  }

  public dcProduct setIsInterval(boolean isInterval) {
    this.isInterval = isInterval;
    setIsIntervalIsSet(true);
    return this;
  }

  public void unsetIsInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINTERVAL_ISSET_ID);
  }

  /** Returns true if field isInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINTERVAL_ISSET_ID);
  }

  public void setIsIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINTERVAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROWKEY:
      if (value == null) {
        unsetRowkey();
      } else {
        setRowkey((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((String)value);
      }
      break;

    case MATERIAL_NAME:
      if (value == null) {
        unsetMaterialName();
      } else {
        setMaterialName((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.List<dcColumn>)value);
      }
      break;

    case IS_INTERVAL:
      if (value == null) {
        unsetIsInterval();
      } else {
        setIsInterval((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROWKEY:
      return getRowkey();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case DEVICE_NAME:
      return getDeviceName();

    case MATERIAL_NAME:
      return getMaterialName();

    case DATA:
      return getData();

    case IS_INTERVAL:
      return isIsInterval();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROWKEY:
      return isSetRowkey();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case DEVICE_NAME:
      return isSetDeviceName();
    case MATERIAL_NAME:
      return isSetMaterialName();
    case DATA:
      return isSetData();
    case IS_INTERVAL:
      return isSetIsInterval();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof dcProduct)
      return this.equals((dcProduct)that);
    return false;
  }

  public boolean equals(dcProduct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rowkey = true && this.isSetRowkey();
    boolean that_present_rowkey = true && that.isSetRowkey();
    if (this_present_rowkey || that_present_rowkey) {
      if (!(this_present_rowkey && that_present_rowkey))
        return false;
      if (!this.rowkey.equals(that.rowkey))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_materialName = true && this.isSetMaterialName();
    boolean that_present_materialName = true && that.isSetMaterialName();
    if (this_present_materialName || that_present_materialName) {
      if (!(this_present_materialName && that_present_materialName))
        return false;
      if (!this.materialName.equals(that.materialName))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_isInterval = true;
    boolean that_present_isInterval = true;
    if (this_present_isInterval || that_present_isInterval) {
      if (!(this_present_isInterval && that_present_isInterval))
        return false;
      if (this.isInterval != that.isInterval)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRowkey()) ? 131071 : 524287);
    if (isSetRowkey())
      hashCode = hashCode * 8191 + rowkey.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
    if (isSetDeviceName())
      hashCode = hashCode * 8191 + deviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaterialName()) ? 131071 : 524287);
    if (isSetMaterialName())
      hashCode = hashCode * 8191 + materialName.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isInterval) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(dcProduct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(other.isSetRowkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, other.rowkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterialName()).compareTo(other.isSetMaterialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialName, other.materialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInterval()).compareTo(other.isSetIsInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInterval, other.isInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("dcProduct(");
    boolean first = true;

    sb.append("rowkey:");
    if (this.rowkey == null) {
      sb.append("null");
    } else {
      sb.append(this.rowkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("materialName:");
    if (this.materialName == null) {
      sb.append("null");
    } else {
      sb.append(this.materialName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInterval:");
    sb.append(this.isInterval);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class dcProductStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public dcProductStandardScheme getScheme() {
      return new dcProductStandardScheme();
    }
  }

  private static class dcProductStandardScheme extends org.apache.thrift.scheme.StandardScheme<dcProduct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, dcProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROWKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rowkey = iprot.readString();
              struct.setRowkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATERIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.materialName = iprot.readString();
              struct.setMaterialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.data = new java.util.ArrayList<dcColumn>(_list8.size);
                dcColumn _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new dcColumn();
                  _elem9.read(iprot);
                  struct.data.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInterval = iprot.readBool();
              struct.setIsIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, dcProduct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rowkey != null) {
        oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
        oprot.writeString(struct.rowkey);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.materialName != null) {
        oprot.writeFieldBegin(MATERIAL_NAME_FIELD_DESC);
        oprot.writeString(struct.materialName);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
          for (dcColumn _iter11 : struct.data)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_INTERVAL_FIELD_DESC);
      oprot.writeBool(struct.isInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class dcProductTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public dcProductTupleScheme getScheme() {
      return new dcProductTupleScheme();
    }
  }

  private static class dcProductTupleScheme extends org.apache.thrift.scheme.TupleScheme<dcProduct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, dcProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRowkey()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(3);
      }
      if (struct.isSetMaterialName()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      if (struct.isSetIsInterval()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRowkey()) {
        oprot.writeString(struct.rowkey);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetMaterialName()) {
        oprot.writeString(struct.materialName);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (dcColumn _iter12 : struct.data)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetIsInterval()) {
        oprot.writeBool(struct.isInterval);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, dcProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.rowkey = iprot.readString();
        struct.setRowkeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.materialName = iprot.readString();
        struct.setMaterialNameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.data = new java.util.ArrayList<dcColumn>(_list13.size);
          dcColumn _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new dcColumn();
            _elem14.read(iprot);
            struct.data.add(_elem14);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isInterval = iprot.readBool();
        struct.setIsIntervalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

